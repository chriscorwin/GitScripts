## /*
#	@description
#	The purpose of this file is to set variables which contain crucial information
#	for ALL gitscripts. Many of the variables set in this file are common/crucial
#	paths, but really any information that needs to persist for multiple gitscripts
#	should find it's home in this file.
#	description@
#
#	@notes
#	- Do NOT edit values in this file for personal use. Instead use environment_config.overrides.
#	- Variables are set using the following syntax:
#
#		[ -n "$VAR_NAME" ] || VAR_NAME="value"
#
#	This syntax means that GitBash will only assign the value to the variable if
#	the variable does not already exist or has an empty string as it's value.
#	- Variable names are NOT required to be strictly uppercase.
#	- Current convention requires trailing slash for all directory/path variables.
#	notes@
## */


# Setup FLGitScripts Home
if [ "x$flgitscripts_path" = "x" ]; then
	# determine the path to this script. it will become the gitscripts path. the cfg directory
	# must live in the same directory as this script for any user overrides to take effect.
	THIS_SCRIPT_PATH="${BASH_SOURCE[0]}"
	if [ -h "${THIS_SCRIPT_PATH}" ]; then
		while [ -h "${THIS_SCRIPT_PATH}" ]; do
			THIS_SCRIPT_PATH=`readlink "${THIS_SCRIPT_PATH}"`
		done
	fi
	pushd . > /dev/null
	cd `dirname ${THIS_SCRIPT_PATH}` > /dev/null
	export THIS_SCRIPT_PATH=`pwd`;
	flgitscripts_path="${THIS_SCRIPT_PATH}/"
	popd  > /dev/null
fi
export flgitscripts_path


# OS specific support (must be 'true' or 'false').
linux=false
darwin=false;
windows=false;
SYSTEM_TYPE="unset";
case "`uname`" in
    MINGW32*)
        windows=true
        SYSTEM_TYPE="windows"
        ;;

    Linux*)
        linux=true
        SYSTEM_TYPE="linux"
        ;;

    Darwin*)
        darwin=true
        SYSTEM_TYPE="darwin"
        ;;
esac
export SYSTEM_TYPE


# Bring in GitScripts  (https://github.com/cmcculloh/GitScripts)
if [ -s "${flgitscripts_path}gitscripts/_gsinit.sh" ]; then
	# We require protection on branches during merges
	export protectmergefrom_path="${flgitscripts_path}input/_gs_protectmergefrom"
	export protectmergeto_path="${flgitscripts_path}input/_gs_protectmergeto"
	export protectpushto_path="${flgitscripts_path}input/_gs_protectpushto"

	# documentation for flgitscripts. **paths must end with forward slash!
	export gsman_paths_user="${flgitscripts_path} ${flgitscripts_path}functions/"

	source "${flgitscripts_path}gitscripts/_gsinit.sh"
else
	echo ${E}"####################################################################################"
	echo "Error setting flgitscripts in environment_config.default: GitScripts can't be found!"
	echo "####################################################################################"
	echo ${X}
	echo
fi



# This block is identical in GitScripts, but should GitScripts ever be removed or
# not found, having it here in a conditional will prevent breakage of flgitscripts.
#
# Git for Windows/mysysGit have a different configuration and setup than Git has
# on Unix. Therefore, some functionality will simply be restricted/accessible based
# on OS.
#
# Both GfW and msysGit mount their home directories on / . If we find a windows path
# (e.g. C:\...) being mounted at / we know the OS is Windows.

if [ -z "$GIT_INSTALL" ] || [ -z "$GIT_ETC" ]; then
	winGitpath=$(mount | awk -f ${flgitscripts_path}awkscripts/findgit.awk)
	if [ -n "${winGitpath}" ]; then
		# Windows
		export GIT_INSTALL="${winGitpath}/"
		export GIT_BIN="${GIT_INSTALL}bin/"
		export GIT_ETC="${GIT_INSTALL}etc/"
		export GIT_EXEC="${GIT_BIN}/git.exe"

		# a custom message of the day that replaces the one that comes with Git.
		# this custom motd replaces Git's unless the $replace_motd variable is set
		# to anything other than an empty string in user.overrides.
		[ -n "$native_motd_path" ] || export native_motd_path="${GIT_ETC}motd"
		[ -n "$gitscripts_motd_path" ] || export gitscripts_motd_path="${gitscripts_path}motd"
	else
		# Unix
		export GIT_ETC="useless for linux"
		export GIT_EXEC="${GIT_INSTALL}"
	fi
fi


# system-specific variables
if [ $SYSTEM_TYPE == "linux" ]; then
	echo "We are on Linux";
	PROGRAMS_ROOT=/usr/bin/

	[ -n "$native_bash_profile_path" ] || native_bash_profile_path="${HOME}/.bashrc"
	[ -n "$native_bash_profile_extras_path" ] || native_bash_profile_extras_path="${HOME}/.bash_extras.d/"
	[ -n "$native_gitscripts_bash_profile_path" ] || native_gitscripts_bash_profile_path="${native_bash_profile_extras_path}gitscripts_profile"
	export native_bash_profile_path
	export native_bash_profile_extras_path
	export native_gitscripts_bash_profile_path

	type firefox &>/dev/null && {
		echo "firefox found."; echo "No need to re-set.";
	} || {
		echo "firefox was NOT found.";
		echo "Will check to see if command exists  and if not, we will set an alias.";

		type -P firefox &>/dev/null && {
			echo "firefox command found, no need to re-set.";
		} || {
			echo "firefox command was NOT found."; echo "We need to set it.";
			[ -n "$firefox" ] || firefox="${PROGRAMS_ROOT}"firefox
		}

	}
	[ -n "$chrome" ] || chrome="${PROGRAMS_ROOT}"google-chrome
	[ -n "$chromium" ] || chromium="${PROGRAMS_ROOT}"chromium-browser
	[ -n "$default_browser" ] || default_browser="${chrome}"
	[ -n "$eclipse_home" ] || eclipse_home="${PROGRAMS_ROOT}"eclipse

	# Workspace-specific
	[ -n "$development_root" ] || export development_root="${HOME}/Development/workspaces/"
	[ -n "$workspace_name" ] || export workspace_name="ubuntu_galileo_workspace"
	[ -n "$myenvironment" ] || export myenvironment="workstation-ubuntu"
	[ -n "$JAVA_DEV_HOME" ] || JAVA_DEV_HOME="${HOME}/Development/java_dev/"

	# JBoss Settings
	[ -n "$JBOSS" ] || JBOSS="${HOME}/Development/opt/jboss-4.0.5.GA/"

elif [ $SYSTEM_TYPE == "darwin" ]; then
	echo "We are on Darwin";
	echo "We are on Linux";
	PROGRAMS_ROOT=/usr/bin/

	[ -n "$native_bash_profile_path" ] || native_bash_profile_path="${HOME}/.bashrc"
	[ -n "$native_bash_profile_extras_path" ] || native_bash_profile_extras_path="${HOME}/.bash_extras.d/"
	[ -n "$native_gitscripts_bash_profile_path" ] || native_gitscripts_bash_profile_path="${native_bash_profile_extras_path}gitscripts_profile"
	export native_bash_profile_path
	export native_bash_profile_extras_path
	export native_gitscripts_bash_profile_path

	type firefox &>/dev/null && {
		echo "firefox found."; echo "No need to re-set.";
	} || {
		echo "firefox was NOT found.";
		echo "Will check to see if command exists  and if not, we will set an alias.";

		type -P firefox &>/dev/null && {
			echo "firefox command found, no need to re-set.";
		} || {
			echo "firefox command was NOT found."; echo "We need to set it.";
			[ -n "$firefox" ] || firefox="${PROGRAMS_ROOT}"firefox
		}

	}
	[ -n "$chrome" ] || chrome="${PROGRAMS_ROOT}"google-chrome
	[ -n "$chromium" ] || chromium="${PROGRAMS_ROOT}"chromium-browser
	[ -n "$default_browser" ] || default_browser="${chrome}"
	[ -n "$eclipse_home" ] || eclipse_home="${PROGRAMS_ROOT}"eclipse

	# Workspace-specific
	[ -n "$development_root" ] || export development_root="${HOME}/Development/workspaces/"
	[ -n "$workspace_name" ] || export workspace_name="mac_helios_workspace"
	[ -n "$myenvironment" ] || export myenvironment="workstation-mac"
	[ -n "$JAVA_DEV_HOME" ] || JAVA_DEV_HOME="${HOME}/Development/java_dev/"

	# JBoss Settings
	[ -n "$JBOSS" ] || JBOSS="${HOME}/Development/opt/jboss-4.0.5.GA/"
	export JAVA_HOME=`/usr/libexec/java_home`

elif [ $SYSTEM_TYPE == "windows" ]; then
	echo "We are on Windows";
	PROGRAMS_ROOT=/c/Program\ Files\ \(x86\)/
	[ -n "$native_bash_profile_path" ] || export native_bash_profile_path="${GIT_ETC}bash_profile"
	[ -n "$native_gitscripts_bash_profile_path" ] || export native_gitscripts_bash_profile_path="${native_bash_profile_path}"

	# Program-specific
	[ -n "$programs_root" ] || programs_root=/c/Program\ Files\ \(x86\)/
	[ -n "$firefox" ] || firefox="${programs_root}"Mozilla\ Firefox/firefox.exe
	[ -n "$chrome" ] || chrome="${HOME}\AppData\Local\Google\Chrome\Application\chrome.exe"
	[ -n "$default_browser" ] || default_browser="${chrome}"
	[ -n "$eclipse_home" ] || eclipse_home="/d/Applications/eclipse/"
	[ -n "$sublime_home" ] || sublime_home="${programs_root}"Sublime\ Text/
	[ -n "$notepad_pp_home" ] || notepad_pp_home="${programs_root}Notepad++/"
	[ -n "$textpad_home" ] || textpad_home="${programs_root}TextPad 5/"
	[ -n "$natural_docs_home" ] || natural_docs_home="/d/java_dev/NaturalDocs-1.5"


	# Workspace-specific
	[ -n "$development_root" ] || export development_root="/d/workspaces/"
	[ -n "$workspace_name" ] || export workspace_name="helios_workspace"
	[ -n "$myenvironment" ] || export myenvironment="workstation-windows"
	[ -n "$JAVA_DEV_HOME" ] || JAVA_DEV_HOME="/d/java_dev/"


	# JBoss Settings
	[ -n "$JBOSS" ] || JBOSS_HOME="/d/opt/jboss-4.0.5.GA/"
fi


# Workspace-specific
[ -n "$buildsprojectname" ] || export buildsprojectname="builds"
[ -n "$mainprojectname" ] || export mainprojectname="finishline"
[ -n "$mediaprojectname" ] || export mediaprojectname="finishline_media"
[ -n "$flgitscriptsprojectname" ] || export flgitscriptsprojectname="flgitscripts"
[ -n "$workspace_path" ] || export workspace_path="${development_root}${workspace_name}/"
[ -n "$project_workspace" ] || export project_workspace="${development_root}${workspace_name}"
[ -n "$media_path" ] || export media_path="${workspace_path}${mediaprojectname}/"
[ -n "$finishline_path" ] || export finishline_path="${workspace_path}${mainprojectname}/"
[ -n "$deploys_path" ] || export deploys_path="${workspace_path}deploys/"
[ -n "$builds_path" ] || export builds_path="${workspace_path}${buildsprojectname}/"
[ -n "$imagescripts_path" ] || export imagescripts_path="${workspace_path}image_scripts/"
[ -n "$csr_path" ] || export csr_path="${workspace_path}finishline_csr/"
[ -n "$promo_editor_path" ] || export promo_editor_path="${workspace_path}promo_editor/"
[ -n "$naturaldocs_path" ] || export naturaldocs_path="${workspace_path}naturaldocs/"
[ -n "$merginator_path" ] || export merginator_path="${workspace_path}merginator/"
[ -n "$flgitscripts_functions_path" ] || export flgitscripts_functions_path="${flgitscripts_path}functions/"
[ -n "$inputdir" ] || export inputdir="${flgitscripts_path}input/"
[ -n "$outputdir" ] || export outputdir="${flgitscripts_path}output/"
[ -n "$awkscripts_path" ] || export awkscripts_path="${flgitscripts_path}awkscripts/"
[ -n "$tempdir" ] || export tempdir="${flgitscripts_path}temp/"
[ -n "$tmp" ] || export tmp="${tempdir}tmp"
[ -n "$flgitscripts_temp_bash_profile_path" ] || export flgitscripts_temp_bash_profile_path="${tempdir}temp_bash_profile"
[ -n "$flgitscripts_config_path" ] || export flgitscripts_config_path="${flgitscripts_path}cfg/"
[ -n "$flgitscripts_config_defaults" ] || export flgitscripts_config_defaults="${flgitscripts_config_path}flgs.config.defaults"
[ -n "$flgitscripts_config" ] || export flgitscripts_config="${flgitscripts_config_path}flgs.config"


# Project-specific
[ -n "$webappwar_path" ] || export webappwar_path="${finishline_path}modules/base/j2ee-apps/base/web-app.war/"
[ -n "$promos_path" ] || export promos_path="${webappwar_path}global/promos/"
[ -n "$mediaLandingPagesPath" ] || export mediaLandingPagesPath="${workspace_path}${mediaprojectname}/media/landing-pages/"


# Java and ANT Settings
[ -n "$JDK_VERSION" ] || export JDK_VERSION="jdk1.5.0_14"
[ -n "$JAVA_HOME" ] || export JAVA_HOME="${JAVA_DEV_HOME}jdk/${JDK_VERSION}/"
[ -n "$ANT_HOME" ] || export ANT_HOME="${JAVA_DEV_HOME}apache-ant-1.8.1"
[ -n "$ANT_CONTRIB_HOME" ] || export ANT_CONTRIB_HOME="${JAVA_DEV_HOME}ant-contrib/"
[ -n "$YUI_COMPRESSOR_HOME" ] || export YUI_COMPRESSOR_HOME="${JAVA_DEV_HOME}yuicompressor-2.4.2/build"
[ -n "$ANT_LIB" ] || export ANT_LIB="${YUI_COMPRESSOR_HOME}/"
[ -n "$ANT_OPTS" ] || export ANT_OPTS=" -Xms128m -Xmx512m -Duser.language=en -XX:PermSize=128M -XX:MaxPermSize=256M "
[ -n "$ANT_ARGS" ] || export ANT_ARGS=" -lib ${ANT_LIB} -Dmyenvironment=${myenvironment} -Dproject.workspace=${project_workspace} -Dmainprojectname=${mainprojectname} -Dmediaprojectname=${mediaprojectname} -Dbuildsprojectname=${buildsprojectname} -Dpath.git-exec=${GIT_EXEC} -DANT_HOME=${ANT_HOME}"


# JBoss Settings
# $JBOSS_HOME is used in JBoss's run.sh file. It has been deprecated in favor of $JBOSS
# which points to the jboss folder, NOT the bin folder within.
[ -n "$JBOSS_LOGS" ] || export JBOSS_LOGS="${JBOSS}server/finishline/log/"
[ -n "$JBOSS_DEPLOY" ] || export JBOSS_DEPLOY="${JBOSS}server/finishline/deploy/"
[ -n "$JBOSS_WEBAPPWAR" ] || export JBOSS_WEBAPPWAR="${JBOSS_DEPLOY}finishline.ear/web-app.war/"
[ -n "$JBOSS_MEDIAWAR" ] || export JBOSS_MEDIAWAR="${JBOSS_DEPLOY}media.war/"


PATH="${PATH}:${JAVA_HOME}bin:${ANT_HOME}/bin:${YUI_COMPRESSOR_HOME}"
CLASSPATH="${CLASSPATH};${JAVA_HOME}lib;${ANT_CONTRIB_HOME};${YUI_COMPRESSOR_HOME}/;${ANT_HOME}"


export PATH="${PATH}:${sublime_home}:${notepad_pp_home}:${eclipse_home}:${textpad_home}:${gitscripts_path}:${flgitscripts_path}:${natural_docs_home}"
export CLASSPATH="${CLASSPATH}"
export ANT_LIB="${ANT_LIB}"
export ANT_ARGS="${ANT_ARGS}"
export ANT_OPTS="${ANT_OPTS}"
export builds_path=${builds_path}
export finishline_path=${finishline_path}


# variable to load flgitscripts functions for scripts
export flloadfuncs="source ${flgitscripts_path}fl-load-funcs.sh"
$flloadfuncs

# Config is important. Create it from default if file exists
! __flgs_config_exists && {
	echo "	> Config file missing. Creating it from default..."
	__flgs_config --reset=quiet
}
