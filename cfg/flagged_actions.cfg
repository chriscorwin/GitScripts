## /* @config
#	@description
#	There are some default behaviors/stylings that we have chosen for GitScripts.
#	We realize that some users have already set some of these "preferences" and
#	would like to keep them. Every flagged action you see in this file occurs
#	by default, as set in cfg/vars.cfg. If you wish to change this behavior, you need to set the
#	appropriate flag in your user.overrides to "false." See examples below.
#	description@
#
#	@examples
#	The example(s) below assume the file you are editing is cfg/user.overrides
#	1) export REPLACE_MOTD=false
#		- motd will not be replaced
#	2) export USE_GS_PROMPT=
#		- flag has not been set to false. the default action--replacing PS1--will occur.
#	examples@
#
#	@dependencies
#	*lib/bashmarks.sh
#	*git_aliases.sh
#	dependencies@
#
#	@file cfg/flagged_actions.cfg
## */


# REPLACE_MOTD
#
# set this flag to false to keep the original Git motd. this only applies
# to Git for Windows/msysGit.
if [ "${REPLACE_MOTD}" == "true" ] && [ "$SYSTEM_TYPE" == "windows" ]; then
	cp "${gitscripts_motd_path}" "${native_motd_path}"
fi


# USE_GS_PROMPT
#
# set this flag to false to keep your own command prompt (PS1) definition.
if [ "${USE_GS_PROMPT}" == "true" ]; then
	#bring in necessary functions
	$loadfuncs

	PS1='
${STYLE_PROMPT_USER}\u@\h${X} ${STYLE_PROMPT_DATE}\d \t${X} ${STYLE_PROMPT_PATH}\w${COL_NORM}
${STYLE_PROMPT_BRANCH} $(__parse_git_branch) ${X}$(__parse_git_branch_state)${X}
$ '
fi


# IMPORT_BASHMARKS
#
# set this flag to false to exclude bashmarks functionality.
if [ "${IMPORT_BASHMARKS}" == "true" ]; then
	source "${gitscripts_lib_path}bashmarks.sh"
fi


# IMPORT_GIT_ALIASES
#
# set this flag to false to exclude GitScripts basic Git command aliases.
# see git_aliases.sh for alias definitions.
if [ "${IMPORT_GIT_ALIASES}" == "true" ]; then
	source "${gitscripts_path}git_aliases.sh"
fi


#
#if [ -z "${}" ]; then

#fi
