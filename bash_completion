#enable custom tab completion
shopt -s progcomp

##
#	Completion for command: proj
##
_tab_proj()
{
	COMPREPLY=()

	# current word being typed
	curw=${COMP_WORDS[COMP_CWORD]}

	# previously typed word
	prev="${COMP_WORDS[COMP_CWORD-1]}"

	# possible commands for proj
	proj_args="add delete merge new open rm view which"

	# commands which use tab completion
	case "$prev" in
		add)
			COMPREPLY=($(compgen -W "this $(git branch)" -- $curw));;

		delete)
			COMPREPLY=($(compgen -W "$(ls ${inputdir} | grep '.proj' | sed 's/\.proj$//')" -- $curw));;

		merge)
			COMPREPLY=($(compgen -W "--squash" -- $curw));;

		open)
			COMPREPLY=($(compgen -W "$(ls ${inputdir} | grep '.proj' | sed 's/\.proj$//')" -- $curw));;

		rm)
			COMPREPLY=($(compgen -W "$(cat ${inputdir}`"${flgitscripts_path}"proj.sh which`.proj)" -- $curw));;

		*)
			COMPREPLY=($(compgen -W "${proj_args}" -- $curw));;
	esac

	return 0
}


##
#	Completion for command: synctree
##
_tab_synctree()
{
	COMPREPLY=()

	# current word being typed
	curw=${COMP_WORDS[COMP_CWORD]}

	# previously typed word
	prev="${COMP_WORDS[COMP_CWORD-1]}"

	# possible commands for proj
	proj_args="-p -a -m"

	# commands which use tab completion
	case "$prev" in
		-p)
			COMPREPLY=($(compgen -W "`ls "$promos_path"`" -- $curw));;

		*)
			COMPREPLY=($(compgen -W "${proj_args}" -- $curw));;
	esac

	return 0
}



#tab completion for the proj command
complete -F _tab_proj proj

#tab completion for the proj command
complete -F _tab_synctree synctree
